/*
 * This work is licensed under the Creative Commons Attribution 3.0 Unported License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by/3.0/
 * or send a letter to Creative Commons, 444 Castro Street, Suite 900, Mountain View, California, 94041, USA.
 */

#ifndef SQMPACKETHANDLER_H
#define SQMPACKETHANDLER_H

// qt core libs
#include <QtCore/QObject>
#include <QtCore/QIODevice>
#include <QtCore/QMap>
#include <QtCore/QDataStream>

//
// PACKETLENGTHTYPE
//
// The datatype which will read first from datastream to determinate the content length
// NOTE: this value has to be the same on client and server, if not, the packet parser will not work properly
//
#define PACKETLENGTHTYPE quint32

//
// DataPacket
//
// The DataPacket will be generated by the packet parser as result after successfully parse process of an packet!
//
struct DataPacket
{
    QIODevice* ioPacketDevice;
    QByteArray* baRawPacketData;
    PACKETLENGTHTYPE intPacktLength;
};

class SQMPacketHandler : public QObject
{
    Q_OBJECT
    signals:
        void newPacketReceived(DataPacket *packet);

    public slots:
        void newDevice(QIODevice* device);
        void disconnectedDevice(QIODevice *device);
        void dataHandler();

    public:
        // singelton static functions
        static void create(QObject *object = 0);
        static SQMPacketHandler* getInstance();

        // static helper functions
        static void sendDataPacket(DataPacket* dpSrc, QByteArray *baDatatoSend);

    protected:
        // protected con and decon so that no one (except the static create method) is able to construct an object!
        SQMPacketHandler(QObject *parent = 0);
        ~SQMPacketHandler();

    private:
        // singelton static memeber
        static SQMPacketHandler *sqmPacketHandler;

        // dynamic members
        QMap<QIODevice*, DataPacket*> mapPacketsInProgress;
        QList<QIODevice*> lstPeers;
        QDataStream *dataStreamTmp;
};

#endif // SQMPACKETHANDLER_H
